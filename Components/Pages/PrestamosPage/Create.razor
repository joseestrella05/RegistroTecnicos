@page "/Prestamos/Create"
@inject PrestamosService prestamosService
@inject PrestamosDetalleService prestamosDetalleService
@inject DeudoresService deudoresService
@inject NavigationManager navigation

<PageTitle>Create</PageTitle>
<EditForm Model="prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />


    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Prestamo</h5>
            </div>

            <div class="card-body ">

                @*Deudor*@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>
                    <InputSelect class="form-control form-select" @bind-Value="prestamos.DeudorId">
                        <option>Elija una opci&oacute;n</option>
                        @foreach (var deudor in ListaDeudores)
                        {
                            <option value="@deudor.DeudorId">@deudor.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => prestamos.DeudorId)" />
                </div>
                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Concepto</strong></label>
                    <InputText class="form-control" @bind-Value="prestamos.Concepto"></InputText>
                    <ValidationMessage For="(() => prestamos.Concepto)" />
                </div>
                @*CuotaNo*@
                <div class="mb-3">
                    <label class="form-label"><strong>Cuota</strong></label>
                    <InputNumber class="form-control" @bind-Value="prestamos.CuotaNo"></InputNumber>
                    <ValidationMessage For="(() => prestamos.CuotaNo)" />
                </div>
                @*Monto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputNumber class="form-control" @bind-Value="prestamos.Monto"></InputNumber>
                    <ValidationMessage For="(() => prestamos.Monto)" />
                </div>
            </div>
            <div class="card shadow mt-3 border-success">
                <div class="card-header bg-white text-dark">
                    <h5>Detalles de las Cuotas</h5>
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" @onclick="GenerarCuotas">Generar Cuotas</button>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-striped text-center table-bordered">
                        <thead class="bg-dark text-white">
                            <tr>
                                <th># Cuota</th>
                                <th>Fecha</th>
                                <th>Valor</th>
                                <th>Balance</th>
                                <th>Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cuota in cuotas)
                            {
                                <tr>
                                    <td>@cuota.CuotaNo</td>
                                    <td>@cuota.Fecha.ToShortDateString()</td>
                                    <td>@cuota.Valor.ToString("C")</td>
                                    <td>@cuota.Balance.ToString("C")</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarCuota(cuota)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            @*footer*@
            <div class="card-footer text-center mt-2">
                <a href="/Prestamo/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Prestamos prestamos = new Prestamos();
    public List<PrestamosDetalle> cuotas = new List<PrestamosDetalle>();
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();

    protected override async Task OnInitializedAsync()
    {
        cuotas = await prestamosDetalleService.Listar(c => c.PrestamoId == prestamos.PrestamoId);
        ListaDeudores = await deudoresService.Listar(d => d.DeudorId > 0);

    }

    private async Task GenerarCuotas()
    {
        if (prestamos.Monto <= 0 || prestamos.CuotaNo <= 0)
        {
            return; 
        }

        if (prestamos.PrestamoId == 0)
        {
            await prestamosService.Guardar(prestamos);
        }

        if (prestamos.PrestamoId == 0)
        {
            return; 
        }

        await prestamosDetalleService.CalcularCuotas(prestamos.PrestamoId, prestamos.Monto, prestamos.CuotaNo);

        await Task.Delay(500);
        cuotas = await prestamosDetalleService.Listar(c => c.PrestamoId == prestamos.PrestamoId);

        StateHasChanged();
    }

    private async Task EliminarCuota(PrestamosDetalle cuota)
    {
        await prestamosDetalleService.EliminarDetalles(cuota.PrestamoId);
        cuotas.Remove(cuota);
    }

    private async Task Guardar()
    {
        await prestamosService.Guardar(prestamos);
        navigation.NavigateTo("/Prestamos/Index");
    }
}
