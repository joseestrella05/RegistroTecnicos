@page "/Tickets/Index"
@inject TicketsServices ticketServices
@inject ClientesServices clienteServices
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<PageTitle>Tickets</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title m-0">Registro de Tickets</h5>
            <a href="/tickets/Create" class="btn btn-primary">
                <span class="bi bi-plus-square"></span> Crear
            </a>
        </div>

        <div class="card-body">
            @*labels*@
            <div class="row">
                @*Filtrar por*@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Desde</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Hasta</strong></label>
                </div>
                <div class="col-1">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise"
                            @onclick="Restablecer">
                    </button>
                </div>

            </div>

        </div>

        @*Inputs y botones*@
        <div class="row align-items-center">
            @*filtro*@
            <div class="col-3">
                <InputSelect class="form-select" @bind-Value="filtro">
                    <option value="" selected disabled>Elija una opción</option>
                    <option value="id">TicketId</option>
                    <option value="Nombres">Cliente Nombres</option>
                    <option value="Fecha">Fecha</option>
                    <option value="Asunto">Asunto</option>
                    <option value="Prioridad">Prioridad</option>
                    <option value="Descripcion">Descripcion</option>
                    <option value="Tiempo Invertido">Tiempo invertido</option>
                </InputSelect>
            </div>

            @*Busqueda*@
            <div class="col-4">
                <div class="input-group">
                    <input class="form-control" @bind="valorFiltro" placeholder="Buscar" />
                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                </div>
            </div>
            <div class="col-2">
                <InputDate class="form-control" @bind-Value="Desde"></InputDate>
            </div>
            <div class="col-2">
                <div class="input-group">
                    <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                </div>
            </div>
        </div>

        <table class="table table-hover table-bordered text-center">
            <thead class="table  table-striped text-black">
                <tr>
                    <th>Id</th>
                    <th>Fecha</th>
                    <th>Descripcion</th>
                    <th>Prioridad</th>
                    <th>Cliente</th>
                    <th>Asunto</th>
                    <th>TiempoInvertidos</th>
                    <th>Tecnico</th>
                    <th>Modificar</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tickets in Tickets)
                {
                    var Tecnico = Tecnicos.FirstOrDefault(t => t.TecnicoId == tickets.ClienteId);
                    var Cliente = Clientes.FirstOrDefault(c => c.ClienteId == tickets.ClienteId);

                    <tr>
                        <td>@tickets.TicketId</td>
                        <td>@tickets.Fecha</td>
                        <td>@tickets.Descripcion</td>
                        <td>@tickets.Prioridad</td>
                        <td>@(Cliente?.Nombres ?? "no encontrado")</td>
                        <td>@tickets.Asunto</td>
                        <td>@tickets.TiempoInvertido</td>
                        <td>@(Tecnico?.Nombres ?? "no encontrado")</td>
                        <td>
                            <a href="/Tickets/Edit/@tickets.TicketId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                        </td>
                        <td class="text-center">
                            <a href="/Tickets/Delete/@tickets.TicketId" class="btn btn-outline-danger bi bi-trash"></a>
                        </td>

                    </tr>
                }
            </tbody>
        </table>

        <div class="card-footer space-between">
            <label><strong>Cantidad: @Tickets.Count()</strong></label>
        </div>
    </div>
</div>

@code {
    public List<Tickets> Tickets = new List<Tickets>();
    public List<Clientes> Clientes = new List<Clientes>();
    public List<Tecnicos> Tecnicos = new List<Tecnicos>();
    private string filtro = "";
    private string valorFiltro = "";
    public DateTime? Desde { get; set; } = null;
    public DateTime? Hasta { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Tickets = await ticketServices.Listar(t => true);
        Clientes = await clienteServices.Listar(t => true);
        Tecnicos = await tecnicoService.Listar(t => true);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int ticketId))
            {
                Tickets = await ticketServices.Listar(t => t.TicketId == ticketId);
            }
            else if (filtro == "Cliente Nombres")
            {
                Clientes = await clienteServices.Listar(c => c.Nombres.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Fecha")
            {
                Tickets = await ticketServices
                .Listar(t => t.Fecha >= Desde && t.Fecha <= Hasta); ;
            }
            else if (filtro == "Asunto")
            {
                Tickets = await ticketServices.Listar(c => c.Asunto.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Prioridad")
            {
                Tickets = await ticketServices.Listar(t => t.Prioridad.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Descripcion")
            {
                Tickets = await ticketServices.Listar(t => t.Descripcion.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Tiempo Invertido")
            {
                Tickets = await ticketServices.Listar(t => t.TiempoInvertido.ToLower().Contains(valorFiltro.ToLower()));
            }


        }
        else
        {
            Tickets = await ticketServices.Listar(p => true);
        }
    }

    private async Task Restablecer()
    {
        Tickets = await ticketServices.Listar(p => true);
        filtro = "";
        valorFiltro = "";
        Desde = null;
        Hasta = null;
    }
}
