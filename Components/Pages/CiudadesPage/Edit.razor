@page "/Ciudades/Edit"
@page "/Ciudades/Edit/{CiudadesId:int}"
@rendermode InteractiveServer
@inject CiudadeServices ciudadesService
@inject NavigationManager navigation

<PageTitle>Modificar</PageTitle>
<EditForm Model="Ciudades" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Ciudad</h5>
            </div>

            <div class="card-body">
                @*Id*@
                <div class="mb-3">
                    <label class="form-label"><strong>CiudadesId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Ciudades.CiudadesId" READONLY></InputNumber>
                </div>

                @*Nombres*@
                <div class="mb-3">
                    <label class="form-label" for="nombres"><strong>Nombre</strong></label>
                    <InputText id="nombres" class="form-control" @bind-Value="Ciudades.Nombres"></InputText>
                    <ValidationMessage For="@(()=> Ciudades.Nombres)"></ValidationMessage>
                </div>
            </div>

            @* footer *@
            <div class="card-footer text-center mt-3">
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Ciudades/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Volver </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CiudadesId { get; set; }
    public Ciudades Ciudades { get; set; } = new Ciudades();
    [Inject] protected ToastService ToastService { get; set; }

    public Edit(ToastService toastService)
    {
        ToastService = toastService;
    }

    protected override async Task OnInitializedAsync()
    {
        if (CiudadesId > 0)
        {
            Ciudades = await ciudadesService.Buscar(CiudadesId);
        }
    }

    public async Task Modificar()
    {
        if (!await Validar())
        {
            await ciudadesService.Guardar(Ciudades);

            ToastService.Notify(new(ToastType.Success, "Exito", $"Ciudad modificado correctamente."));
            navigation.NavigateTo("/Tecnico/Index");
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, "Error", $"Ya existe una Ciudad con ese nombre."));
        }
    }

    public async Task<bool> Validar()
    {
        var existeCiudad = await ciudadesService.BuscarNombres(Ciudades.Nombres);
        return existeCiudad != null;
    }

}
